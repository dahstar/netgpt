#from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth import authenticate, login
from .forms import ReplyForm
from django.shortcuts import render, redirect,get_object_or_404
from .forms import TweetForm
from .models import Tweet
from django.contrib.auth.decorators import login_required
from django.core.exceptions import PermissionDenied
from django.shortcuts import render, redirect
from .models import Profile
from django.http import JsonResponse
from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from .forms import ProfileForm
from .models import Tweet, Reply
from .forms import TweetForm, ReplyForm
import random
import string
from django.http import HttpResponse
import openai
from django.shortcuts import render
from django.contrib.auth.models import User
openai.api_key = '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'
messages = [ {"role": "system", "content": 
              "You are a intelligent assistant."} ]
def generate_ai_content1(length=3):
    # Generate a random string of specified length
    s= ''.join(random.choice(string.ascii_letters) for _ in range(length))
    return  str(s)
def searchgpt(message):
   print("searching gpt")  
   if message:
        messages.append(
            {"role": "user", "content": message},
        )
        chat = openai.ChatCompletion.create(
            model="gpt-3.5-turbo", messages=messages
        )
        reply = chat.choices[0].message.content
         
        messages.append({"role": "assistant", "content": reply})
        return reply
def profile_view(request, username):
    # Your profile view logic here
    # You can retrieve the user with the provided username and render the profile page
    try:
        user = User.objects.get(username=username)
    except User.DoesNotExist:
        # Handle the case where the user does not exist
        user = None

    return render(request, 'tweets/profile.html', {'user': user})
def generate_ai_content(request):
  try:
    global messages
      
    # Get the tweet's content from the query parameter
    tweet_content = request.GET.get("tweet_content")
    
    ai_generated_content =searchgpt(tweet_content)
    if  "<td>SESSION_EXPIRE_AT_BROWSER_CLOSE</td>          <td class='code'><pre>False</pre></td>        </tr>              <tr>          <td>SESSION_FILE_PATH</td>    " in ai_generated_content:
                return "error can't connect chatgpt try again"
    return HttpResponse(ai_generated_content)
  except Exception as e :
         return "error on connection to chatgpt try again"+"\n"+str(e)

def get_new_content2(request):
    # Logic to fetch new content from models or other sources
    new_content = "New content fetched from models or views."

    return  HttpResponse('no post')
 
def tweet_detail(request, tweet_id):
    tweet = get_object_or_404(Tweet, pk=tweet_id)
    replies = Reply.objects.filter(tweet=tweet)

    if request.method == 'POST':
        reply_form = ReplyForm(request.POST)
        if reply_form.is_valid():
            new_reply = reply_form.save(commit=False)
            new_reply.user = request.user
            new_reply.tweet = tweet
            new_reply.save()
            return redirect('tweet_detail', tweet_id=tweet_id)
    else:
        reply_form = ReplyForm()

    
    context = {
        'tweet': tweet,
        'replies': replies,
        'user': request.user,  # Pass the user object to the template context
    }
    return render(request, 'tweets/tweet_detail.html', context)
def login_view(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        
        user = authenticate(username=username, password=password)
        if user is not None:
            login(request, user)
            return redirect('tweet_list')  # Redirect to the tweet list page
        else:
            # Handle invalid login
            return render(request, 'tweets/login.html', {'error_message': 'Invalid login credentials'})
    
    return render(request, 'tweets/login.html')
def profile(request):
    user_profile, created = Profile.objects.get_or_create(user=request.user)
    
    if request.method == 'POST':
        form = ProfileForm(request.POST, instance=user_profile)
        if form.is_valid():
            form.save()
            return redirect('profile')
    else:
        form = ProfileForm(instance=user_profile)
    
    context = {'form': form}
    return render(request, 'profile.html', context)
def home(request):
    tweets = Tweet.objects.all().order_by('-created_at')
    total_score = 0  # Initialize total score
    for tweet in tweets:
        tweet.score = tweet.likes.count() + tweet.retweets.count() * 2 - tweet.dislikes.count()
        total_score += tweet.score
    if request.method == 'POST':
         form = TweetForm(request.POST)
         if form.is_valid():
            tweet = form.save(commit=False)
            tweet.user = request.user  # Associate the tweet with the current user
            tweet.save()
            return redirect('tweet_list')
    else:
        form = TweetForm()
    context = {'tweets': tweets, 'form': form, 'total_score': total_score}
    return render(request, 'tweets/tweet_list.html', context)

def reply_list_view(request, tweet_id):
    tweet = get_object_or_404(Tweet, pk=tweet_id)
    replies = tweet.replies.filter(parent_reply__isnull=True)  # Only top-level replies

    if request.method == 'POST':
        reply_form = ReplyForm(request.POST)
        if reply_form.is_valid():
            reply_form.cleaned_data['content'] = 'New content for the reply'
            new_reply = reply_form.save(commit=False)
            new_reply.user = request.user
            new_reply.tweet = tweet
            new_reply.parent_reply = None  # Top-level reply
            new_reply.save()
            return redirect('tweet_detail', tweet_id=tweet_id)
    else:
        reply_form = ReplyForm()

    context = {'tweet': tweet, 'replies': replies, 'reply_form': reply_form}
    return render(request, 'tweets/tweet_detail.html', context)

@login_required
def like_reply(request, reply_id):
    reply = get_object_or_404(Reply, pk=reply_id)
    user = request.user

    if user.is_authenticated:
        if user in reply.likes.all():
            reply.likes.remove(user)
        else:
            reply.likes.add(user)
            if user in reply.dislikes.all():
                reply.dislikes.remove(user)
    else:
        # Handle the case when the user is not authenticated
        pass

    return redirect('tweet_detail', tweet_id=reply.tweet.id)

@login_required
def dislike_reply(request, reply_id):
    reply = get_object_or_404(Reply, pk=reply_id)
    user = request.user

    if user.is_authenticated:
        if user in reply.dislikes.all():
            reply.dislikes.remove(user)
        else:
            reply.dislikes.add(user)
            if user in reply.likes.all():
                reply.likes.remove(user)
    else:
        # Handle the case when the user is not authenticated
        pass

    return redirect('tweet_detail', tweet_id=reply.tweet.id)

@login_required
def retweet_reply(request, reply_id):
    reply = get_object_or_404(Reply, pk=reply_id)
    user = request.user

    if user.is_authenticated:
        if user in reply.retweets.all():
            reply.retweets.remove(user)
        else:
            reply.retweets.add(user)
    else:
        # Handle the case when the user is not authenticated
        pass

    return redirect('tweet_detail', tweet_id=reply.tweet.id)
def register(request):
    if request.method == 'POST':
        form = UserCreationForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)
            return redirect('tweet_list')  # Redirect after successful registration
    else:
        form = UserCreationForm()
    return render(request, 'registration/register.html', {'form': form})
def home_view(request):
    tweets = Tweet.objects.all()
    
    if request.method == 'POST':
        form = TweetForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('home')
    else:
        form = TweetForm()
    
    context = {'tweets': tweets, 'form': form}  # Include the 'form' variable
    return render(request, 'home.html', context)
@login_required
def delete_tweet(request, tweet_id):
    tweet = get_object_or_404(Tweet, pk=tweet_id)
    
    if request.user == tweet.user or request.user.is_superuser:
        if request.method == 'POST':
            tweet.delete()
            return redirect('home')
        context = {'tweet': tweet}
        return render(request, 'delete_tweet.html', context)
    else:
        raise PermissionDenied
@login_required
def delete_reply(request, reply_id):
    reply = get_object_or_404(Reply, pk=reply_id)
    tweet_id = reply.tweet.id  # Store the tweet ID before deleting the reply
    if reply.user == request.user or request.user.is_superuser:
        reply.delete()
    return redirect('tweet_detail', tweet_id=tweet_id)
@login_required
def create_tweet(request):
    if request.method == 'POST':
        form = TweetForm(request.POST)
        if form.is_valid():
            # Create a new tweet object but don't save it yet
            new_tweet = form.save(commit=False)
            generate_ai_content(new_tweet)
            # Set the user for the tweet (assuming you have a user authentication system)
            new_tweet.user = request.user  # Make sure to adjust this according to your user model
            
            # Now save the tweet object
            new_tweet.save()
            
            return redirect('tweet_list')  # Redirect to a view named 'tweet_list'
    else:
        form = TweetForm()
    
    return render(request, 'tweets/create_tweet.html', {'form': form})
@login_required
def like_tweet(request, tweet_id):
    tweet = get_object_or_404(Tweet, pk=tweet_id)
    user = request.user

    if user.is_authenticated:
        if user in tweet.likes.all():
            tweet.likes.remove(user)
        else:
            tweet.likes.add(user)
            if user in tweet.dislikes.all():
                tweet.dislikes.remove(user)
    else:
        # Handle the case when the user is not authenticated
        # You can redirect them to the login page or show an error message
        pass

    return redirect('tweet_list')

@login_required
def dislike_tweet(request, tweet_id):
    tweet = get_object_or_404(Tweet, pk=tweet_id)
    user = request.user

    if user.is_authenticated:
        if user in tweet.dislikes.all():
            tweet.dislikes.remove(user)
        else:
            tweet.dislikes.add(user)
            if user in tweet.likes.all():
                tweet.likes.remove(user)
    else:
        # Handle the case when the user is not authenticated
        # You can redirect them to the login page or show an error message
        pass

    # Return a redirect response to the tweet_list view
    return redirect('tweet_list')

@login_required
def retweet_tweet(request, tweet_id):
    tweet = get_object_or_404(Tweet, pk=tweet_id)
    user = request.user

    if user.is_authenticated:
        if user in tweet.retweets.all():
            tweet.retweets.remove(user)
        else:
            tweet.retweets.add(user)
    else:
        # Handle the case when the user is not authenticated
        # You can redirect them to the login page or show an error message
        pass

    return redirect('tweet_list')
  





def tweet_list_view(request):
    tweets = Tweet.objects.all()
    
    if request.method == 'POST':
        form = TweetForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('tweet_list')  # Redirect to the tweet list page after creating a tweet
    else:
        form = TweetForm()
    
    context = {'tweets': tweets, 'form': form}
    return render(request, 'tweets/tweet_list.html', context)
def tweet_list(request):
    tweets = Tweet.objects.all()
    return render(request, 'tweets/tweet_list.html', {'tweets': tweets})
